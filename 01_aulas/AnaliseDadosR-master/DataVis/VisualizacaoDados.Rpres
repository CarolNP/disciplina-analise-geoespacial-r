Visualização de dados
========================================================
author: Felipe S. M. Barros
date: 12/03/2018
autosize: true

Trabalhando con gráficos
========================================================

Temas

- sintaxe de gráficos com `ggplot2`  

Carregando instalando biblioteca
========================================================
O `ggplot2` faz parte de um conjunto de pacotes chamados de `tidyverse`.  

Por isso ele poderá ser intsalado individualmente ou junto aos demais pacotes do `tidyverse`.
```{r, eval = FALSE}
install.packages("ggplot2", dependencies = TRUE)
#OU
install.packages("tidyverse", dependencies = TRUE)
```

Carregando biblioteca
========================================================
Aos poucos vamos ver outros pacotes do `tidyverse` mas, por agora, vamos carregar apenas o `ggplot2`, e vamos usar um conjunto de dados que já vem com ele. Se trata do `mpg`, um conjunto de dados sobre performance de diferentes carros, mas pense em algum dado que seja da sua área...    
```{r}
library(ggplot2)
head(mpg)
# até o momento mpg está no ambiente do pacto ggplot2;
mpg <- mpg # agora estará no ambiente do atual projeto R;
```

De que se tratam os dados?
========================================================

```{r}
# manufacturer
# model
# displ = engine displacement, in litres (size)
# year = year of manufacture
# cyl = number of cylinders
# trans = type of transmission
# drv = f = front-wheel drive, r = rear wheel drive, 4 = 4wd
# cty = city miles per gallon
# hwy = highway miles per gallon
# fl = fuel type
# class = "type" of car
```

Pergunta:
========================================================
## Carros pequenos são mais eficientes?  

Vamos tentar analisar isso através de um gráfico de dispersão?  
  
Como vocês fariam esse gráfico?  

Resposta:
========================================================
Para criar um gráfico de dispersão no R, basta usar a função `plot()` e, dentro do parênteses, informar a coluna a ser inserida no eixo X e a coluna do eixo Y:
```{r}
plot(mpg$hwy, mpg$displ)
```

Sobre gráficos 'base'
========================================================
Mesmo que os gráficos criados usando a biblioteca 'base' do R nos permite personalizá-lo completamente, a sintaxe de criação e modificação não é intuitiva.  

Por isso criaram o ggplot2, que propõe uma nova sintaxe para criação de gráficos (visualização de dados) e até certo ponto de estética também.  

Breve exemplo
========================================================
![](./img/Using_BasePlot.png)  

Breve exemplo II
========================================================
![](./img/Using_ggplot2.png)  

Como usar o ggplot? I
========================================================
O `ggplot` trabalha com camadas. A primeira que criamos é a base do gráfico, onde informamos que dados serão usados (neste caso, `mpg`):  
`ggplot(data = mpg)`  

A essa camada base se adicionam outras camadas e, por isso, se usa o `+` após cada expressão;  

Como usar o ggplot? II
========================================================
Como já criamos a camada base, informando os dados a serem usados, vamos adicionar a geometria para informar de que gráfico se trata (pontos, linhas, etc) e a estética (aparência) a ser dada:  
`geom_point(mapping = aes(x = displ, y = hwy))`

Como usar o ggplot? III
========================================================
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

Como alterar a estética (cor por clase)?
========================================================
Vamos melhorar o gráfico? Vamos agregar outras variáveis para melhorar o gráfico, torná-lo mais informativo.  

Vamos fazer com que os pontos sejam coloridos em função da variável classes de carro.  
```{r, eval = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, colour = class))
```

Como alterar a estética (forma por clase)?
========================================================
Assim como fizemos com a cor, podemos alterar a forma dos pontos de acordo com a classe.  

**Como você acha que seria isso?**
```{r, eval = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

Como alterar a estética (forma por clase) II ?
========================================================
Reparem que **SUV ficou sem simbologia**. Isso se deve ao fato de o ggplot estar bseado em estudos e evidencias científicas. Algumas delas dizem que não é eficiente usar mais de seis simbolos diferentes em uma mesma representação visual.  
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

Como alterar a estética (color) ?
========================================================
Que resultado teremos com o comando abaixo?

```{r, eval=FALSE}
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy) , colour = "red")


ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy) , shape = 6)
```

Exercícios I
========================================================
Que resultados teremos com o código a seguir?  
```{r, eval = F}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
```

Exercícios I (resposta)
========================================================
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
```  
O que há de estranho nesse comando?  

Exercício II
========================================================
Que resultados teremos com o código a seguir?  
```{r, eval=FALSE}
# O que acontece ao usar uma variavel numerica como cor?
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = cty))

# E no tamanho?

# E no formato?

# Como a estética muda com a variavel categorica/contínua?
```

Observação!
========================================================
Caso você tenha uma variável numérica que represente uma classe/categoria, como por exemplo, a variável `cyl` e queira que ela esteja como tal no gráfico, basta converter a variável `cyl` para factor, usando `as.factor(cyl)`.
compare:

```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = cyl))

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = as.factor(cyl)))
```  

Adicionando mais variáveis aos gráfico
========================================================
Podemos adicionar uma quarta variável ao nosso gráfico, como no exemplo:  

**Como ficará o gráfico?**  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = cty, color = cyl))
```

Outros tipos de gráficos
===========================================================
Para fazermos outros tipos de gráficos, além do grico dde dispersão, vamos usar outras geometrias (`geom_*`) do `ggplot`:

Por exemplo:  
`geom_smooth` (**suavizador**)  
ps. para mais informações sobre o `geom_smooth`, veja: `?geom_smooth`.  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Parâmetros estéticos
===========================================================
Muitas vevzes os parâmetros estéticos (que são declarados em `aes()`), são os mesmos.   
**Mas nem sempre**  

Com `smooth` não temos o parâmetro `shape`, mas sim, o `linetype`.  

**Como ficaria  seguinte gráfico?**
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

Gráficos com mais de uma geometría II:
============================================================
Perceba que estamos repetindo alguns elementos estéticos...  
**Será que podemos melhorar, removendo a redundância?**  

**E se fizermos assim, que resultado teremos?**
```{r, eval = FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```

Gráficos com mais de uma geometría III:
=============================================================
E se quisermos que os pontos tenham cores relacionados às classes de carros?
**Atenção:** Só os pontos!  
**Como ficaria o código para fazer dito gráfico?**  

Gráficos com mais de uma geometría III (resposta):
=============================================================
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(aes(colour = class)) + 
  geom_smooth()
```

Exercícios III:
================================================================
Que gráfico produzirá o código abaixo? Há algo novo nele? Do que se trata?  
```{r, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
```

Exercícios IV:
================================================================
Esses códigos produzirão gráficos diferentes?  
```{r, eval=FALSE}
# Grafico 1
ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
# Grafico 2
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(aes(colour = class)) + 
  geom_smooth()
```

Exercícios V:
================================================================
Como você reproduziria esse gráfico?  
  
![](./img/Graficos.png)

Exercícios VI:
==============================================================
Que outras geometrias poderíamos usar para fazer:  
1. boxplot (x = class, y = hwy)?  
1. histograma (x = hwy)?  
1. gráfico de barras (x = class)?  

Exercícios VI (resposta):
==============================================================
```{r, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
ggplot(data = mpg, mapping = aes(x = hwy)) + 
  geom_histogram()
ggplot(data = mpg, mapping = aes(x = class)) + 
  geom_bar()
```

Barplot e Histogram
================================================================
Os **gráficos de barra**, **boxplot** e **histograma** são exemplos interessantes de como o `ggplot` nos facilita a vida.  

Ao usarmos as geometrias `geom_bar()`, `geom_boxplot()` ou `geom_hist()`, o `ggplot` faz a contagem ou a análise de frequencia automaticamente, antes de apresentar o gráfico.  
Assim como a geometria `geom_smooth()`, que ajusta uma regressão.  

```{r}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class))
```

Barplot OBS  
================================================================
Caso seu dado já tenha uma variável com a contagem a ser usada num gráfico de barras, basta, então usar o `geom_col()`

Barplot parâmetros estéticos
================================================================
Como devo fazer para que cada coluna esteja com cores relacionadas à classe de carro?  

Barplot parâmetros estéticos
================================================================
Qual resultado teremos a partir dos gráficos a seguir?  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, colour = class))

ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = class))
```

Barplot com duas variáveis
==================================================================
Como poderiamos fazer para, em um `barplot`, identificar a proporção relacionada a uma segunda variavel categórica?  

Exemplo: gráfico de barra com classes de carro no eixo X, mas com as cores em função  do tipo de motor (dianteiro, traseiro ou quatro rodas)? 
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = drv))
```

O parâmetro `position = "fill"`
==================================================================
Permite que se compare as proporções de forma mais eficiente, veja:
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = drv), position = "fill")
```

Parâmetro "coordenadas""
==================================================================
Um argumento, ou parâmetro, que é bem importante é o `coord_flip()`:
Ele nos facilita definir a orienteção dos gráficos.  
Considerando o gráfico abaixo:  
 - Que efeito teremos se alteramos a orientação do gráfico?  
 - Como poderíamos fazer isso?  

```{r}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
```

Gráfico Polar
===================================================================
A função `coord_polar()` nos ajuda a criar gráficos com o sistema de símbolos em formato polar.
Veja um exemplo:  
```{r}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = class)) + coord_polar()
```

Gráfico Polar II
===================================================================
Como ficaria o gráfico se definimos que as cores devem estar em função de outra variável categórica?  
```{r, eval=FALSE}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = drv)) + coord_polar()
```

Gráfico Polar III
===================================================================
E se usamos o parâmetro `position = "fill"`?  
```{r, eval=FALSE}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = drv), position = 'fill') + coord_polar()
```  

Savando o gráfico
===================================================================
Para salvar o gráfico elaborado, basta, apos os comando de criação, usar: `ggsave()`  

```{r, eval=FALSE}
ggsave("meu_grafico.png")
ggsave("meu_grafico.pdf")
```

Resumo
===================================================================
De forma geral, vimos que `ggplot` tem uma sintaxe específica para elaborar gráficos.
Podemos resumir dessa forma:
```{r, eval=FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(
     mapping = aes(<MAPPINGS>),
     stat = <STAT>, 
     position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION>
```

Resumo II
================================================================
![](./img/grammargraphics.png)  

Dados de diamantes
================================================================
Vamos fazer alguns exercícios com dados de diamantes?  
O ggplot vem com um conjunto de dados sobre diamantes...  
Para saber de que se trata cada variável (coluna), basta executar `?diamonds'.  

Ou, caso tenha algum conjunto de dado que queira experimentar, fique à vontade!
```{r, eval = FALSE}
head(diamonds)
diamonds <- diamonds
```
