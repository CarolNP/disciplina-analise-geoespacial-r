Elaboração de relatórios com RMarkdown
========================================================
author: Felipe Sodré Mendes Barros
date: `r format(Sys.time(), '%d-%m-%Y')`
autosize: true

e-mail:  felipe.b4rros@gmail.com

Markdown: Do que se trata?
========================================================
*Markdown* é uma linguagem simples para formatação de textos. A ideia é que a partir dessa linguagem você possa transformar seu texto em um documento de *Word*, *HTML* ou até mesmo *PDF*, tornando a formatação do texto mais simples e **objetiva**.

RMarkdown: do que se trata?
========================================================
O *RMarkdown*, é um pacote que nos possibilita integrar a linguagem *R* com o *Markdown*.  

**Dessa simples junção, podemos criar documentos ao mesmo tempo em que desenvolvemos nossas análises.**  

Ou seja, ao mesmo tempo em que estamos analisando dados com *R* já podemos ir criando um relatório, por exemplo.  

Com o *RMarkdown*, pode-se também elaborar outros tipos de documentos, como apresentações. **Mas não veremos isso agora;**

Vantagens:  
====
Usar o *RMarkdown* traz várias vangens, das quais cito:
- Fomenta a reproducibilidade;  
- Permite que mais de uma pessoa colabore em relatórios (usando *Git* e *GitHub*);  
- Permite apresentar o código usado, caso isso seja pretinente;  
- Facilita a criação e incorporação de gráficos/tabelas e dados do projeto ao relatório;  

Instalação
========================================================
Para trabalhar com o *RMarkdown*, basta instalar a biblioteca de mesmo nome:  
```{r, eval=FALSE}
# instalando
# install.packages("rmarkdown", dependencies = TRUE)
library(rmarkdown)
```  

Antes de começar  
====
Alguns pontos básicos:  
  
- A extensão do arquivo é *.Rmd* (*R* + *md* [*Markdown*]), independente do tipo de documento que se pretende criar (*HTML*, *PDF* ou *Doc*); 
  - **ALerta**: Algumas funcionalidades apenas ficam disponíveis ao realizarmos a renderização ao PDF;  
- Ao criar um documento *Rmd* novo, o mesmo terá sempre um exemplo (conteúdo) básico;  
- Todo documento *Rmd* deverá ter três elementos:
  - Cabeçalho de configuração *Markdown* (começa e termina com  ```---``` )  
  - Pedaços de código (*code chunk*) (começa e terminam com   ``` ``` ``` )  
  - O texto em sí, usando a linguajem *Markdown* para definição de título, negrito, etc
  
Como funciona  
====

Uma vez criado o documento com o texto e as análises feitas, o mesmo será **renderizado**  e transformado em um documento no formato solicitado.  

Criando Doc .Rmd
====
  
![](./img/TipoDoc.png)  
  
Exercício I
====
  
1. Criar um documento *Rmarkdown* e executar-lo sem modificar nada;  
    * Perceba como está a área de configuração do seu *.Rmd*;  
1. Execute-o novamente, mas dessa vez alterando o formato final pelo menu do *Knit*;  
    * Veja novamente a área de configuração do *Rmd*. O que mudou?  
    
![](./img/Knit.png)  

Sintaxe Markdown I
====
Vamos começar entendendo a sintaxe *Markdown*.  

A sintaxe *Markdown* é toda relacionada à **formatação de texto**. Como vocês puderam observar, o símbolo \#\# define que naquela linha estará o texto com um título de segunda ordem no nível hierárquico, já que o título de primeira ordem seria definido com apenas um \#.  

**A hierarquia de títulos é, portanto, definida pela sequência de \#.**  

Sintaxe Markdown II:  
====

* **Negrito**: Para colocar uma palavra ou frase em negrito, basta usar dois asterístico (\*\*)  para iniciar o trecho e dois asterístico para fechar o texto a ser enfatizado (ex.: \*\*trecho em negrito\*\*).
* *Itálico*: Similar ao **negrito**, mas usa-se apenas um asterístico no início e outro no fim (ex.: \*trecho em italico\*).  
* ~~riscado~~: Basta inserir dois tis (\~\~) ao início e outros dois ao fim do trecho a ser riscado (ex.: \~\~trecho riscado\~\~);  

**Pontos importantes**:  

> Os elementos como **negrito**, *italico*, ~~riscado~~, dentre outros, deverão ser seguidos por texto, sem espaço entre o elemento de formatação e o texto a ser formatado. Já com relação aos títulos, é necessário dar espaço entre o \# e o texto a receber a formatação de titulo.  

Exercício II:  
====

1. Colocar todo o primeiro parágrado como riscado;
1. Colocar algumas paravras em **negrito**;  
1. Colocar outras palavras em *intálico*;  
1. Alterar a hierarquia dos títulos;  
1. Cria um novo título de primeira hierarquia;  
1. Renderize em formato *PDF*. Analise o indice do documento. Obedeceu a hierarquia definida?  
1. Renderize em formato *.doc*. Analise o indice do documento. Obedeceu a hierarquia definida? 
Trabalhando com códigos R
====
Já vimos como identificar e inserir código *R* em nosso documento de texto. Vimos que existe um padrão para isso. Mas vamos a alguns detalhes:  

![](./img/DetalhesCodigoR.png)

* Labels;  

Trabalhando com códigos R
====

* configurações do **code chunk**;  
  1. *echo*: define se o texto do código inserido deverá constar no texto do documento.  
  1. *eval*: define se o trecho de código deverá ser executado.  
  1. *include*: define se o trecho de código, **que será executado** apresentará no texto do documento seus resultados, mensagens e avisos (*warnings*);  
  1. *fig.width*: Essas opções devem ser seguidas de um valor numérico (exemplo, *fig.width = 7*) representando o tamanho de largura/altura da figura em *inches*;  

Exercício III  
===

1. No *Rmd* criando anteriormente, altere os parâmetros dos trechos de código. Quais são os resultados das alterações realizadas?  
1. Altere o gráfico usando *ggplot*;  
    * Perceba que há que carregar a biblioteca (incluí-lo no trecho de código).  

Trabalhando com códigos R ( *inline code*)
====

*Inline code*, é a possibilidade de escrever um codigo curto (de uma linha) e que terá seu resultado inserido na mesma posição e que se encontra o código.

Para usá-lo basta usar uma crase (``` ` ```) seguida pela definição da linguagem de programação a ser usada (meste caso, *r*) e posteriormente, o comando a ser executado. Exemplo: ``` ` r length( c(1, 2, 3, 4)) ` ```

**Para que serve?**  

Trabalhando com códigos R ( *inline code*) II
====
 **Exemplo**:  
> Em nossa análise foi realizada a média de ``` ` r length( c(1, 2, 3, 4)) ` ``` valores numérico sorteados ao azar, cujo resultado foi de ``` ` r mean( c(1, 2, 3, 4)) ` ```;  

**Resultado**:  

> Em nossa análise foi realizada a média de `r length( c(1, 2, 3, 4)) ` valores numérico sorteados ao azar, cujo resultado foi de `r mean( c(1, 2, 3, 4)) `;  

Inserindo tabela  
===

Há algumas formas de adicionar os *dataframes* ou *tibles* ao nosso relatório de forma automática e configurada. Vamos usar a função `kable()`, do pacote `knitr`, da seguinte forma:  
**Exemplo**:  

```
\```{r InserindoTabela}
knitr::kable(head(mtcars))
\```
```  
  
**Resultado**:  
  
```{r InserindoTabela2, echo=FALSE}
knitr::kable(head(mtcars))
```

Inserindo tabela II  
===
Incentivo a vocês a **olharem o help** da função `kable`: há vários parâmetros de configuração que afetarão o *layout* final da tabela.  

Inserindo imagem
===

Sabemos bem que nem todas as imagens e figuras de nossos documentos e/ou artigos são provenientes do *R*. Então precisamos saber como inseri-las.  

Para fazer isso basta incluir o seguinte código ``` ![](endereco/para/imagem.png)```. **A exclamação tem que se mantida**.  

Das maiores fontes de erro, antecipamos:  

* Caminho para imagem errado;  
* Nome errado do arquivo;  
* Falta de parágrafo antes e depois de onde deverá ir a imagem;  

Referência cruzada
===

> Por referência cruzadas entendemos a possibilidade de referir-nos a imagens e seções de nosso documento no corpo de nosso texto, sem termos que nos preocupar com seus respectivos números, facilitando **muito** a edição e a manutenção de nossos textos. Isso pelo fato de ambos serem sempre atualizados segundo a ordem das figuras/seções a cada *renderização*.  

Referência cruzada com gráficos
===
Vimos que os gráficos são diretamente inseridos no documento final. Um detalhe que não vimos foi como inserir um título (ou legenda) a ele. Basta usar a configuração do trecho de código R `fig.cap`;  

```
\```{r, fig.cap="Gráfico de dispersão entre variável x e y.""}
plot(c(1,2,3), c(3,2,1))
\```
```  

Para criar referência cruzada com os gráficos criados, precisaremos criar uma *label*.  

A *label* usada, não é a mesma que a do *code-chunk* e criamos ao inserir em `fig.cap`o comando `\\label{LabelDoGrafico}`.  

Referência cruzada com gráficos II
===
**Por agora só criamos a *label* do gráfico.**  
Para fazer a referência à esse gráfico em nosso texto, usaremos o comando `\ref{LabelDoGrafico}` onde quisermos referir-nos à figura.  

Referência cruzada com gráficos III  
===
 *Exemplo*:  
```
\```{r s, fig.cap = "\\label{fig:plotTest}Gráfico de dispersão entre as variáveis x e y."}
plot(c(1,2,3,4), c(1,2,3,4))
\```
```  

> Aqui farei referência à ```\ref{fig:plotTest}``` onde vemos o gráfico de dispersão entre as variáveis x e y.  

Exercício IV:  
===  
  
* Crie uma legenda e *label a um gráfico e faça referência ao mesmo em alguma parte do texto;  
* Use o *inline code* para informar quantas linhas e colunas o conjunto de dados `mtcars' possui;
* Altere o summary existente, usando a função `kable()' do pactoe `knitr`;  

Referências bibliográficas  
===

Aqui começamos a fazer a transição de um simples relatório a um potencial artigo... Vamos incluir bibliografia!  

Qualquer gerenciador de bibliografias (**Zotero**, **Mendeley**, etc) possibilita extrair os artigos no formato *.bib*. 

Ao abrir um *.bib* em um editor do texto, poderá ver algo assim:  

```
@article{Akcakaya2009,
abstract = {The World Conservation Union (IUCN) defined a set of categories for conservation status supported by decision rules based on thresholds of parameters such as distributional range, population size and risk of extinction. [...] },
author = {Akcakaya, H Resit and Ferson, Scott and Burgman, Mark a and Keith, David a and Georgina, M and Todd, Charles R},
doi = {10.1046/j.1523-1739.2000.99125.x},
file = {:home/felipe/Documentos/ConsistentIUCN.pdf:pdf},
issn = {0888-8892},
journal = {Conservation biology},
keywords = {Artigo pos,Revisao{\_}Intro},
number = {4},
pages = {1001--1013},
title = {{Making Consistent IUCN Classifications under Uncertainty}},
url = {http://onlinelibrary.wiley.com/doi/10.1046/j.1523-1739.2000.99125.x/full},
volume = {14},
year = {2009}
}
```  

Referências bibliográficas II  
===  

Uma vez que tenhamos exportado os artigos a serem usados para o formato *.bib* **para a pasta em que estamos trabalhando**, precisaremos informar ao *Markdown* que vamos usar a opção de bibliografia e qual será o arquivo *.bib* a ser usado:  

```
---
title: "Relatorios com RMarkdown"
date: 12/02/2019
output:
  pdf_document: default
  word_document: default
bibliography: Referencias.bib
---
```

Neste caso estou dizendo que o arquivo com as referências bibliográficas estão no arquivo "Referencias.bib".

Referências bibliográficas III  
===  

Tendo feito isso, agora já posso fazer as citações, da seguinte forma:  

* `[@Akcakaya2009]`  
* `@Akcakaya2009`  
* `[@Akcakaya2009, @Akcakaya2009]`  
* `@Akcakaya2009, @Akcakaya2009`  

Legal. Até agora, já adicionamos nossa base de dados de referencias, fizemos a citação.  

**Mas como fica a bibliografia?**  

Referências bibliográficas III  
===  
Basta adicionarmos um capitulo `## References` (com qualque níve de hierarquia) e pronto! E por mais que usemos mais de uma citação para um mesmo artigo, só aparecerá uma referencia...  

> E aí: Vai querer continuar usando o Word?  

Referências bibliográficas IV  
===  

**Outra coisa, pelo fato de o *.bib* se um doc de texto, o mesmo pode ser versionado.** Outros colaboradores poderão adicionar novas referencias e fazer citações e tudo será controlado por versionamento...  
