Manipulação da dados II
========================================================
author: Felipe Sodré Mendes Barros
date: 16/06/2019
autosize: true

e-mail:  felipe.b4rros@gmail.com

Programa
========================================================
Nesta aula vamos usar outra bibioteca pertencente ao **tidyverse**, chamada **dplyr**;
Com essa biblioteca vamos explorar as seguintes manipulações:
- Filtrar observações de um data frame: *filter()*;  
- Ordenar as observações (regístros): *arrange()*;  
- Filtrar (selecionar) variáveis (colunas): *select()*;  
- Criar novas variáveis: *mutate()*;  
- Criar sumários estatísticos: *summarise()*;  

Sintaxe
========================================================
Essas funções possuem basicamente a mesma sintaxe:  

1. O primeiro argumento é o objeto com o dado (data frame);  
1. O segundo argumento descreve o que deve ser feito com o dado;  
1. O resultado será outro data.frame;  

Bibliotecas
========================================================
Para essa aula vamos usar a biblioteca **dplyr** e os dados de voos do aeroporto de NY, disponível pela biblioteca **nycflights13**.  

Ha, e claro, **ggplot2** para fazer alguns gráficos ;)  
```{r, eval = TRUE}
# install.packages("dplyr", dependencies = TRUE)
library(dplyr)

# Para usar os dados de voos!
# install.packages("nycflights13")
library(nycflights13)

# para os graficos
library(ggplot2)
```  

Voos
========================================================
O dado que vamos usar é carregado junto da biblioteca, com o nome *flights*.  

```{r}
(flights <- nycflights13::flights)
```  

Observação da sintaxe anterior
========================================================
Antes de começar, vamos dar uma olhada na sintaxe anterior:  
  
- A sintaxe começa e termina com parenteses para indicar ao **R** que, após executar o comando, o resultado seja apresentado no terminal;  
- Estamos criando um objeto chamado flights;  
- A sintaxe "`nycflights13::`" indica ao **R** que estamos usando algum elemento da biblioteca *nycflights13*. Neste caso, o objeto *flights*;  
- OBS: é muito comum usar essa sintaxe "`libraryName::function()`" quando se pretende usar uma função que, apesar de possuir o mesmo nome, tem comportamento diferentes e estão disponíveis em duas bibliotecas em uso.  
```{r, results = FALSE}
(flights <- nycflights13::flights)
```  

Tibble
========================================================
Perceba que os dados que vamos usar estão em um formato chamado **tibble**. É um *data.frame* com algumas modificações onde, além de ser mais ágil:  
Sempre apresenta as dez primeiras observações;  
Apresenta o tipo de dados de cada variável:  
- int  
- dbl
- chr
- dttm (date-times)
- lgl (TRUE / FALSE)
- fctr (categoricos)
- date  

filter()
==========================================================
A função **filter()**, como o próprio nome deixa claro, serve para obtermos um subconjunto de dados a partir dos dados de entrada (que seria o primero argumento). O resultado será o subconjunto dos dados que atenderem **POSITIVAMENTE** às expressões passadas na função:  
Ex. Quero trabalhar com os voos do mês de Fevereiro (2);
```{r}
filter(flights, month == 2)
```  

pipe! (%>%)
=========================================================================
![](./img/pipe.jpg)  

Os pipes **%>%** nos permite criar uma cadeia de funções sem termos que criar novos objetos a cada operação.

Com isso, podemos focarnos ao processo de transformação dos dados e não na criação de objetos.  

**%>%** Pode ser resumido assim:  
- x %>% f(y) = f(x, y)  
- x %>% f(y) %>% g(z) = g(f(x, y), z)  

Se deve ler da esquerda para a direita e de cima para baixo.

filter(): Exercício I
==========================================================
Voltando ao filtro realizado anteriormente:  

Como faríamos o mesmo procedimento usando **pipe**?:

filter(): Exercício I - solução
==========================================================
```{r}
flights %>% 
  filter(month == 2)
```  

filter() II
==========================================================
Podemos adicionar mais de uma expressão à função **filter()**, adicionando víngula a cada nova expressão, ou usando o caractere &;  

Perceba que nesses casos, estaremos usando a condicional: **AND**. Ou seja: se queremos trabalhar com os voos que ocorreram no primeiro dia **E** em fevereiro:
```{r, eval = FALSE}
flights %>% 
  filter(month == 2, day == 1)
# seria equivalente a
flights %>% 
  filter(month == 2 & day == 1)
```  

Exercício II: filter()
==========================================================
Como poderíamos fazer para filtrar os voos ocorridos depois de Maio e que tiveram atraso de chegada (*arr_delay*) maior ou igual a 60?  

E como ficaría se quisermos gerar um gráfico com esse subset, onde no eixo X estaríam os meses e as barras mostrando em cores diferentes as diferentes aeroportos de origen de tais aviões?  

E se fizessemos a seguinte consulta, que resultado teremos?:  
```{r, eval = FALSE}
flights %>% 
  filter(month == 2 & month == 3)
```  

Exercício II: solução
==========================================================
```{r, eval = FALSE}
flights %>% 
  filter(month > 5, arr_delay >= 60)
# gráfico 
flights %>% 
  filter(month > 5, arr_delay >= 60) %>% 
  ggplot() +
  geom_bar(aes(x = month, fill = origin))
```  

Exercício III: filter()
==========================================================
Como seria o código para termos um gráfico de dispersão entre *arr_delay* (eixo X) e *dep_delay* (eixo Y) dos voos com:  
- *arr_delay* maior que zero e *dep_delay* maior ou igual a zero;  

Exercício III: solução
==========================================================
```{r}
flights %>% 
  filter(arr_delay > 0, dep_delay >= 120) %>% 
  ggplot() +
  geom_point( aes(x = arr_delay, y = dep_delay))
```  

Expressões
==========================================================
  
-  == (igual)
- != (diferente)
- > (mayor que)
- >= (mayor o igual que)
- < (menor que)
- <= (menor o igual que)

Operadores lógicos
==========================================================
![](./img/transform-logical.png)  

filter() e Operadores lógicos
==========================================================
Testando com operador "or";  

```{r, eval=FALSE}
flights %>% 
  filter(month == 11 | month == 12)
```  

filter() e Operadores lógicos II
==========================================================
Caso queira filtar por mais de um valor para  a mesma variável, podemo usar o operador  *%in%* seguido de uma lista de valores:

```{r, eval=FALSE}
flights %>% 
  filter(month %in% c(11, 12))
```  

Exercício IV: filter() operadores lógicos
=============================================================
  
- Crie um gráfico com a relação dos voos com atraso de saída e de chegada sejam maiores que duas horas;  
- Crie um gráfico de barra com a quanttidade de voos para os aeroportos de Houston (IAH o HOU);  

Exercício IV: solução
=============================================================
```{r, eval = FALSE}
flights %>% 
  filter(arr_delay > 120 | dep_delay > 120 & year == 2013) %>% 
  ggplot(aes(x=arr_delay, y=dep_delay)) + 
  geom_point()

# II
flights %>% 
  filter(dest %in% c("IAH", "HOU")) %>% 
  ggplot(aes(x= dest)) +
  geom_bar()
```  

arrange()
==============================================================
Ordena as observações segundo os valores das variáveis desejadas.  

Vamos ordenar os dados por ano, mês e hora de partida, que tenham atraso de chegada maior que 60 minutos.
```{r}
flights %>% 
  arrange(year, month, dep_time) %>% 
  filter(arr_delay > 60)
```  

arrange() II
==============================================================
Caso queiram inverter a ordem, basta usar a função *desc()*;  
Ex.: Ordenando os dados por ano, mes e hora de partida, sendo as últimas horas primeiro.
```{r}
flights %>% 
  arrange(year, month, desc(dep_time))
```  

Exercício V: arrange()
===============================================================
Identifique os voos:  
- com maior atraso de saída;
- com chegada antecipada;
- Voos com menos tempo de voo;  

Valores desconhecidos: NA
===============================================================
Na função *arrange()* os valores *NA* estarão sempre por último, já que não podem ser ordenados.  
Vale a penas aclarar: valores deconhecidos possuem características particulares.  
Vamos a eles:
```{r}
NA + 10
NA / 2
10 == NA
NA == NA
NA > 5
```  

Valores desconhecidos: NA II
===============================================================
Se quiser usar um operador lógico com valores **NA**, se deve usar *is.na()*:
```{r}
is.na(NA)
```  

select()
==========================================================
A função **select()** serve para selecionar um subconjunto de variáveis (colunas) do conjunto de dado usado.  
Por exemplo, se queremos trabalhar apenas com as variáveis *year*, *day* y *month*:  
```{r}
flights %>% 
  select(year, day, month)
```  

Select() II
==========================================================
Se necesitamos remover uma variável, também podemos usar a função **select()**, mas com o hífen ("-") antes da variável ou conjunto de variáveis a serem removidas:
```{r, eval=FALSE}
# removendo year
flights %>% 
  select(-year)
# removendo year e day
flights %>% 
  select(-year, -month)
# removendo todas variaveis desde year até dep_time
flights %>% 
  select(-year:-dep_time)
```  

Exercícios VI: select()
===========================================================
Como poderíamos selecionar as variáveis:
- dep_time
- dep_delay
- arr_time 
- arr_delay  

Exercícios VI: solução
===========================================================
```{r}
select(flights, dep_time, dep_delay, arr_time, arr_delay)
```  

mutate()
=============================================================
A função **mutate()** permite criar novas colunas que recebrão valores relacionados a uma variável já existente.  
Essas colunas ficarão sempre no final do data frame (tibble). Por isso, vamos criar um conjunto de dados menor e modificar a coluna **air_time** (tempo de voo) que está em minutos, para horas:  

```{r}
flights_mutate <- select(flights, 
                      year:day, 
                      distance, 
                      air_time)

# flightHours vai ser o nome da variável
# que vai receber como valores
# air_time / 60
flights_mutate %>% 
  mutate(flightHours = air_time / 60) 
```  

mutate() II
===========================================================
Outra ponto importante é a possibilidade de criar uma nova coluna com base a outra coluna que está sendo criada no mesmo processo. Veja:    
```{r}
flights_mutate %>% 
  mutate(hours = air_time / 60,
       speed = distance / hours) # variavel hours acabou de ser criada e sera usada
```  

transmute()
================================================================
Caso nosso interesse esteja apenas nas variáveis novas, podemos usar o **transmute()**. Com isso, ao invés de termos uma variável adicionada ao nosso data frame, teremos como resultado apenas a coluna nova.  
Ex.:
```{r}
flights_mutate %>% 
  transmute(hours = air_time / 60,
       speed = distance / hours)
```  

Exercício VII: mutate()
=======================================================================
Crie uma nova variável de distancia convertentdo **distance**, que está en milhas, para Km.  
E calcule a valocidade em Km/h.  
**obs: 1mi = 1.61Km**  

Exercício VII: solução
=======================================================================
```{r, eval=FALSE}
flights %>% 
  mutate(distanceKm = distance * 1.61,
         hours = air_time / 60,
       speedKMH = distanceKm / hours) %>% 
  select(flight, distance, distanceKm)
```  

summarize()
=========================================================================
A função **sumarize** aplica uma função matemática/estatística à uma ou mais variáveis (colunas) do nosso conjunto de dados.  
Ex.: Média de atrasos de saída:  

```{r}
# Summarise
flights %>% 
  summarise(AtrasoMedio = mean(dep_delay, na.rm = TRUE)) # repare no na.rm = remove NA
```  

summarize()
=========================================================================
Repare bem no resultado!  
Não se agrega uma variável, nem uma linha ao nosso conjunto de dados.  
Mas sim realizar algum cálculo à uma ou mais variáveis, resumindo-as em uma observação (linha).  

summarize() + group_by()
===========================================================================
**summarize()** é uma ferramenta bem interessante que pode ser usada com a função **group_by()**.  
A função **group_by()** muda a unidade de análise do conjunto de dados, passando a considerar os grupos formados. Vejamos:  
Ex.: Analisando a média de atraso de saida por companhia aérea:
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarise(AtrasoSaida = mean(dep_delay, na.rm = TRUE)) %>% 
  arrange(desc(AtrasoSaida))
```  

summarize() + group_by() II
========================================================================
Quando se cria grupo com mais de uma variável, a cada resumo (**summarize()**) se "sobe" um nível do grupo, o que permite realizar cálculos progresivos.  
Ex.  
- Qual a quantidade de voos por Ano, Mês e Dia?  
- E por Ano e Mês?  
- E por Ano?  

```{r, eval = FALSE}
# Grupos con mas de una variable
per_day   <- flights %>% 
  group_by(year, month, day) %>% 
  summarise(flights = n())

(per_month <- summarise(per_day, flights = sum(flights)))

(per_year  <- summarise(per_month, flights = sum(flights)))
```

Exercício VIII: summarize() + group_by()
==========================================================================
  
- Crie um gráfico de linhas com o atraso médio por mês de cada companhia arérea.  
- Qual é o destino (*dest*) com maior atraso de chegada médio?  
- Qual é a companhia com o menor número de voos?  
- Faça um gráfico de linhas com a média de atrasos (chegada ou saida, você escolhe :) por mês?  

Exercício VIII: solução 1
==========================================================================
```{r}
flights %>% 
  group_by(year, month, carrier) %>% 
  summarise(delay = mean(dep_delay, na.rm = TRUE)) %>% 
  ggplot(aes(x = month, y=delay, colour = carrier)) +
  geom_line()
```  

Exercício VIII: solução 2
==========================================================================
```{r}
flights %>% 
  group_by(dest) %>% 
  summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% 
  arrange(desc(delay))
```  

Exercício VIII: solução 3
==========================================================================
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarise(count = n()) %>% 
  arrange(count)
```  

Exercício VIII: solução 4
==========================================================================
```{r}
flights %>% 
  group_by(year, month) %>% 
  summarise(delay = mean(dep_delay, na.rm = TRUE)) %>% 
  ggplot(aes(x = as.factor(month), y=delay, group = year)) +
  geom_line()
```  

Exercícios IX:
=======================================
  
- Cual avião (**tailnum**) tem a maior média de atraso de saída?  
- Cuais destinos recebem mais voos?  
- Para cada avião, conte quantos voos tem atrasos menores a 3 horas (lembrese que os atrasos estão em minutos).  

Exercícios IX: solução I
=======================================
```{r}
flights %>% 
  group_by(tailnum) %>%
  summarise(meanDelay = mean(arr_time, na.rm = TRUE)) %>%
  arrange(desc(meanDelay))
```  

Exercícios IX: solução II
=======================================
```{r}
flights %>% 
  group_by(dest) %>%
  summarise( count = n()) %>%
  arrange(desc(count))
```  

Exercícios IX: solução III
=======================================
```{r}
flights %>% 
  group_by(tailnum) %>%
  filter(dep_time < 180) %>% 
  summarise( count = n()) %>%
  arrange(desc(count))
```
