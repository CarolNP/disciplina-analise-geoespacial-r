Manipulação de Dasos  
========================================================
author: Felipe Sodré Mendes Barros
date: 11/06/2019
autosize: true

e-mail: felipe.b4rros@gmail.com

Programa
========================================================
Nesta aula vamos trabalhar com algumas funções para manipulação e organização de dados.  
Vamos usar a biblioteca *tidyr* que faz parte das bibliotecas do chamado *tidyverse*.  
Caso tenha interesse em conhecer os fundamentos técnicos, veja [este artigo]( http://www.jstatsoft.org/v59/i10/paper).  
```{r}
# install.packages("tidyr")
library(tidyr)
library(ggplot2) # vamos fazer mais graficos \0/
```  

Três regras de organização de dados
========================================================
Para que o conjunto de dado seja fácil de manipular, necessitamos que:
  
- Cada variável seja uma coluna;
- Cada observação seja uma linha;
- Cada valor tenha sua própria 'célula';

![](./img/tidy-1.png)  

Exemplo (como deve ser)
========================================================
Con essas regras estamos assegurando uma estrutura de dados consistente, além de tornar prático o trabalho de análise de dados.  

Compare esses exemplos:
```{r, echo = FALSE}
table1 %>% 
  dplyr::select(country, year, cases)
```  

Ejemplo II (como não deve ser)
========================================================
```{r, echo = FALSE}
table1 %>% 
  dplyr::select(country, year, cases) %>% 
  spread(year, cases)
```

Considerações
========================================================
Como vimos, a segunda tabela apresentada não está estruturada de forma conveniente.  

Afinal, o nome das colunas "1999" e "2000" são, na verdade, informações que deveriam estar nas células. Além disso, não nos informa de que se trata o valor numérico que estão nas células da tabela.  
Perceba: não é uma questão de certo/errado. É uma questão de organização/estrutura dos dados.  

- A maioria das pessoas que produzem dados não estão preocupadas com a etapa de análise;  
- Os dados são geralmente organizados para facilitar a obtenção e, não necessariamente, o processo de análise.  

Pacote tydr
========================================================
A biblioteca **tydr**, traz várias ferramentas para manipulação de dados.  
E por isso, traz alguns exemplos de dados bem estruturados e não tão bem estruturados assim.  
Vamos usar os dados que vem com esse pacote para aprender a manipular e organizar os dados. 

Nesse processo, é sempre importante conhecer as tarefas mais comuns na organização:

1. Mudar a estrutura, convertendo variável - valor célula;  
1. Separar uma variável em diferentes colunas;
1. Separar uma observação em diferentes linhas;

Para esses casos vamos usar as funções **gather()** e **spead()**.  

gather()
===========================================================
Vamos dar uma olhada no objeto *table4a*.  
Neste caso, temos como variável (colunas) valores que deveriam estar como valores de uma variável que as unisse ("year" ou "ano").  
Perceba também que o fato de usar os valores "1999" e "2000" como variável nos impede de usar essa informação em um gráfico.  
```{r}
table4a
```  

gather(): exemplo
============================================================
Com a função **gather()** vamos poder transformar esses valores ("1999" e "2000") em novas variáveis atribuindo a eles seus respectivos valores.  
![](./img/tidy-9.png)  

gather() II
============================================================
Vamos entender os parâmetros da função **gather()**:
  
- Nome das variáveis (colunas) que deveriam ser valores;  
- O parâmetro *key* se refere ao nome a ser dado à variável (coluna) que vai ser criada recebendo os valores "1999" e "2000". Neste caso, vou nomea-la de "year";  
- O parâmetro *value* se refere ao nome a ser dado à variável que vai ser criada recebendo os valores que estão atribuidos às atuais colunas "1999" e "2000". Neste caso estou chamando de "cases".  
```{r}
table4a %>% 
  gather("1999", "2000", key = "year", value = "cases")
```  

Pipe (%>%): O que é, para que serve e de que se alimentam :) 
============================================================
O simbolo que usei anteriormente ( %>% ) é chamado de "pipe". Não o cachimbo. Mas de "cano/tubo".  

A ideia dele é tornar o código mais legível. Ao utilizar-lo, estamos dizendo ao **R** que, aplique a função que segue ao objeto mencionado no início.  

Ao ler um código que use os pipes, podemos entender-los como "então faça"...  

Com isso podemos criar um fluxo de trabalho sem termos que nos preocupar com a criação de objetos a cada passo.  

Não se preocupe muito com ele agora. Veremos com calma mais à frente como o pipe é uma "mão na roda".  

Podemos cria-los usando:  
**`ctrl + shift + m`**  

gather() e ggplot
============================================================
Vejam que após realizar essa modificação eu posso usar (mapear) a variável `year` em um plot usando o ggplot.
```{r}
table4a %>% 
  gather("1999", "2000", key = "year", value = "cases") %>% 
  ggplot() +
  geom_col(aes(x = country, y = cases, fill = year)) +
  theme_minimal()
```  

gather(): resultado
============================================================
![](./img/gather.gif)  

gather(): Exercicio I
=============================================================
Faça as modificações necessárias na "table4b", para que cada variável esteja em uma coluna e os valores nas células correspondentes.  

Os valores armazenados neste data.frame corresponde à **população**.
```{r}
table4b
```  

spread()
==================================================================
A função **spread** faz o oposto ao realizado pela função **gather()**.  

![](./img/tidy-8.png)  

spread(): exemplo
==================================================================
Será útil quando as observação estejam divididas em diferentes observações (linhas), como por exemplo na *table2*:
  
- As variáveis "cases" e "population" (que estão divididas em diferentes observações -linhas) deveriam estar como variáveis e com seus respectivos valores em cada célula do data.frame.  

```{r}
table2
```  

spread(): Resultado
==================================================================
Vamos usar a função **spread()**, a cual necessita dois parâmetros:  

- O parâmetro *key* deverá informar a coluna que contenha os valores que deverão ser transformados em variáveis (neste caso, "type");  
- O parâmetro *value* deverá informar a coluna que contenham os valores relacionados a cada valor transofrmado em variavel (neste caso, "count");

```{r}
table2 %>%
    spread(key = type, value = count)
```  

spread(): Exercicio II
===================================================================
Usando a planilha *"AccidentesBicicletas_2017_TipoPersona2.csv"* disponível na pasta *./dados*, como poderiamos fazer para analisar em um gráfico de barra a quantidade de acidentes?  
Tipo de acidente no eixo X; quantidade de condutores no eixo Y e as barras sinalizando as proporções por sexo?  

**Resumo**: Quem provoca mais acidente? Homens ou mulheres?  
```{r}
TipoPersona <- read.csv("./dados/AccidentesBicicletas_2017_TipoPersona.csv")
head(TipoPersona)
```  

spread(): resolução
==================================================================
```{r}
TipoPersona %>%
  spread(TIPO.PERSONA, value = VITIMAS) %>% 
  ggplot() +
  geom_col(aes(x = TIPO.ACCIDENTE, y = CONDUCTOR, fill = SEXO)) 
```  

gather() e spread(): resumo
===================================================================
![](./img/tidyr-spread-gather.gif)  

gather() y spread(): Exercicio III
===================================================================
Crie um gráfico de barras que nos permita identificar, a cada categoría de accidente, a proporção de acidentes de bicicleta por sexo, usando a planilha *"AccidentesBicicletas_2017_Sexo.csv"*:  
  
- Que manipulação precisa ser feita? Conversão wide - long?  
- Devemos usar spread() ou gather()?  
- Como fica o código todo, incluindo o gráfico?  

```{r}
bici <- read.csv("./dados/AccidentesBicicletas_2017_Sexo.csv", sep = ";")
head(bici)
```  

gather y spread(): resolução
=====================================================================

```{r}
bici %>%
  gather("HOMBRE", "MUJER", "NO.ASIGNADO", key = "SEXO", value="Vitimas") %>%
  ggplot(aes(x = TIPO.ACCIDENTE, y=Vitimas, fill = SEXO)) +
    geom_bar(stat="identity")
```  

separando e unindo
=======================================================================
Outra operação muito comum é a separação de determinados valores que estão em uma mesma variável em duas ou mais variáveis.  

Veja na "table3" a variável *"rate"*. O que vemos  que essa variável possui informações de (*cases* e *population*) concatenadas, separadas por um elemento comum em todas as observações (neste caso *"/"*).
```{r}
table3
```  

separate()
=======================================================================
Vamos usar a função **separate()** para separa os valores da variável "rate" em duas variáveis. Essa função possui dois parâmetros básicos:
  
- O nome da variável com os valores a serem separados;  
- O parâmetro "*into*", receberá os nomes das variáveis a serem criadas após seáração dos valores.  

![](./img/tidy-17.png)  

separate(): Resultado
=======================================================================
Essa função está baseada no conceito de expressões regulares. Isso faz com que os elementos afanuméricos (caracteres que não são numerico nem letra) sejam identificados como elementos que separam os valores.  
Para mais informações veja o *help* da função.  
```{r}
table3 %>% 
  separate(rate, into = c("cases", "population"))
```  

separate(): Exercicio IV
===============================================================
Use a tabela *"AccidentesBicicletas_2017_fecha.csv"* para fazer os seguinte gráficos:
  
- Gráfico de barra com a quantidade de acidentes por dia, mostrando os tipos de acidentes  
    - Qual dia houve mais acidentes?  
    - Qual foi o tipo de acidente mais comum neste dia?  
- Gráfico de barra com a quantidade de acidentes por mes, mostrando os tipos de acidentes  
    - Qual mês houve mais acidentes?  
    - Qual foi o tipo de acidente mais comum neste mês?  

separate(): resolução
===============================================================
```{r, eva = TRUE}
acidentesData <- read.csv("./dados/AccidentesBicicletas_2017_fecha.csv", sep = ";")
head(acidentesData)
```  

separate(): resolução II
===============================================================
```{r, eval = FALSE}
#Por dia
acidentesData %>%
  separate(FECHA, into = c("Día", "Mes", "Ano")) %>% 
  ggplot(aes(x = Día, fill = TIPO.ACCIDENTE)) + geom_bar()

# por mes
acidentesData %>%
  separate(FECHA, into = c("Día", "Mes", "Ano")) %>% 
  ggplot(aes(x = Mes, fill = TIPO.ACCIDENTE)) + geom_bar()
```  

unite()
================================================================
Como vocês podem imaginar, a função **unite()** faz o inverso da função **separate()**.  
**unite()** leva três parâmetros:
  
- O nome da nova variável a ser criada armazenando os valores concatenados;  
- Os nomes das variáveis a serem unidas;  
![](./img/tidy-18.png)  

unite(): observação
================================================================
Outro parâmetro que pode ser usado é o "*sep*", que por padrão está como "_".  

Dessa forma os valores concatenados em uma mesma variável estão com "_" entre eles.  
Caso não queira esse separador, basta usar *sep = ""*.  

Exemplo, unindo TIPO.DE.ACCIDENTE com Tipo.Vehiculo:
```{r}
acidentesData %>%
  unite(Concatenados, TIPO.ACCIDENTE, Tipo.Vehiculo)
```

unite(): Exercicio V
================================================================
Usando os dados do exercicio anterior:
  
- Crie um gráfico de barras com a quantidade de acidentes pode dia da semana e com a proporção baseada em uma nova categoria a ser criada: TIPO.DE.PERSONA + SEXO  

unite(): resolução
===============================================================
```{r}
acidentesData %>%
  unite(NovaVariavel, TIPO.PERSONA, SEXO) %>%
  ggplot(aes(x = DIA.SEMANA, fill = NovaVariavel)) + geom_bar()
```  

Modelo CO2 INPE-EM
===============================================================
[INPE-EM TOTAL RESULTS](http://dados.gov.br/dataset/inpe-em)  
[MODEL NAME = r2019](http://inpe-em.ccst.inpe.br/sobre/)  

- Vegetation Removal = vr  
- Secondary Vegetation = sv  
- (OBS: area in hecatares, CO2 in MtCO2(= 10 12 g), other gases in CO2Eq)  

As estimativas de emissão de **2ª ordem buscam representar com maior realismo a taxa de liberação do carbono para a atmosfera ao longo do tempo** – levando em consideração que uma parte da biomassa é transformada em produto madeireiro e que outra parte não será queimada, sofrendo decomposição gradual no terreno (acima ou abaixo do solo). 

Nas **estimativas de 1ª Ordem, assume-se liberação instantânea de 100% de carbono existente acima e abaixo do solo**.

Carregando os dados
===============================================================
```{r}
# install.packages("readxl") # CRAN version
library(readxl)
co2 <- read_excel("./dados/inpe_EM_BRAmz_resultados1960-2016.xlsx")
colnames(co2)
```


Exercícios I
===============================================================
Vamos analisar a diferença entre emissão e absorção para as áreas que tiveram vegetação removida (VR)?  
Vamos fazer com um gráfico de barras:
- Eixo X: anos;  
- Eixo Y: Valor de CO2;  
- Diferencie absorção e emissão pela cor;  
- Obs: o ggplot não precisará fazer calculo. O valor de CO2 por ano já está calculado.

Exercícios I: solução
===============================================================
```{r}
co2 %>% 
  gather(SV_CO2_emission, SV_CO2_absorption, key = "CO2", value = "value") %>% 
  ggplot() + geom_col(aes(x = Year, y = value, fill = CO2))
```

Exercícios II
===============================================================
Vamos analisar como se comporta os modelos de CO2 ao longo do tempo apra as areas que tiveram vegetação removida (VR)? Vamos tentar com um gráfico de linha:  
- Eixo X: anos  
- Eixo Y: Valores de CO2  
- Diferencie as linhas de **primeira** e **segunda** ordem;  

Exercícios II: solução
===============================================================
```{r}
co2 %>% 
  gather(VR_CO2_1stOrder, VR_CO2_2ndOrder, key = "CO2_Order", value = "value") %>% 
  ggplot() + geom_line(aes(x = Year, y = value, color = CO2_Order))
```

Exercícios IV
===============================================================
E com relação ao CO2 liquido (net*) de primeira e segunda ordem? Será que diferem ao longo do tempo?  
Vamos tentar com um gráfico de linha:
- Eixo X: anos;  
- Eixo Y: valores de CO2;  
- Diferencie as linhas de **primeira** e **segunda** ordem;  

Exercícios IV
===============================================================
```{r}
co2 %>% 
  gather(net_CO2_1rsOrder, net_CO2_2ndOrder, key = "CO2_Liquido", value = "value") %>% 
  ggplot() + geom_line(aes(x = Year, y = value, color = CO2_Liquido))
```
