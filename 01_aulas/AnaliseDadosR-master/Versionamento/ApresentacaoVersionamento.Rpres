Versionamento com Git e GitHub
========================================================
author: Felipe Sodré Mendes Barros
date: 
autosize: true

Modo clássico de versionamento
===============

![Modo clássico de versionamento \label{phdcomic}](./img/phd101212s.png)  

Introdução
===========
Controle de versão (ou, versionamento): **registrar as alterações realizadas (e a evolução) de pedaços de código/scripts/software ao longo do tempo.**  

Fugir do:    
>**Tese01_06_FB.R**  
>**Tese02_07_FB.R**  
>**Tese01_08_Orientador_FB.R**  
>**Tese_FINAL_FB.R**  
>**Tese_FINAL_FINALLLLLL_FB.R** 

Introdução II
===========
E para colaboração com outros pesquisadores?  
Fugir dos sistemas de *nuvem* (*oneDrive*, *GoogleDrive*, *Dropbox*, etc);
E usar o GitHub;

Git GitHub e RStudio
===========
As estratégias anteriores são limitadas, não garantem reproducibilidade, não garantem robustez com relação aos arquivos slavos (podem ser corrompidos), etc;

O **RStudio**, assim como várias outras *IDEs*, já possuem ferramentas integradas ao Sistema de controle de versão *Git*, tornando muito cômodo sua adoção aos iniciantes;  

Para o controle de versões de scripts, vamos usar o **Git**;  
E para podermos trabalhar com outros colaboradores, vamos suar o **GitHub**  
Há outros sistemas similares, como: *Gitlab* ou *Bitbucket*  

Benefícios  
===========
O controle de versão de seus scripts, códigos, funções e etc são importantes quando:  
  
- Vocês percebe que seu código não está produzindo o resultado esperado após alguma modificação e você necessita retorná-lo ao um determinado ponto anterior;  
- Você, mesmo que sem querer, tiver excluido algum pedaço do seu código e o necessita mas já não sabe como fazê-lo novamente;  
- Quando você deseja mostrar o que foi feito, ou quer ver o que outro(s) colaborador(es) fez (fizeram);  
- Você quiser testar alguma modificação no código sem comprometer sua integridade;  
- Ou quando você não tiver certeza que o que você pretende fazer vai funcionar;  

Git: do que se trata?  
===========
  
![git logo](./img/gitLogo.png)  

*Git* é um sistema de versionamente criado por [Linus Torvald](https://pt.wikipedia.org/wiki/Linus_Torvalds) para colaboração de forma [assíncrona](https://pt.wikipedia.org/wiki/Comunica%C3%A7%C3%A3o_ass%C3%ADncrona);  

**A ideia é que os colaboradores de um projeto possam criar modificações e fazer testes sem comprometer a versão *estavel* do script/função/software.**  
  
Git: Instalação e configuração  
===========  
1. [Download](https://git-scm.com/downloads)
1. Configuração:
    * Nome de usuário;
    * E-mail;  

```{bash, eval=FALSE}
# No terminal do Git:
git config --global user.name "Mona Lisa"
git config --global user.name

git config --global user.email "email@example.com"
git config --global user.email
```
  
Configurando RStudio  
===========
O *Git* é um sistema idenpendente do *RStudio*. E para usar o *Git* no *RStudio* teremos que confirgurar-lo:  
  
1. Buscar no menu *tools*>*Global Options*;  
1. Clicar em *Git/SVN*;  
1. Clicar em "*Enable version control interface for RStudio projects*";  
  
Configurando RStudio II  
===========

![Janela de configurações globais RStudio \label{Global1}](./img/Global1.png)  
Configurando RStudio III (observações)  
===========

`r emo::ji("warning")` Para usar o Git no RStudio, é necessário sempre trabalhar com os projetos do RStudio;  

`r emo::ji("bulb")` Isso te obriga a trabalhar sempre com pastas específicas para cada projeto;  

`r emo::ji("award")` Tenha sempre em mente: **se versiona o projeto. Por isso, não misture pastas!!** `r emo::ji("skull")`  


Criando um novo projeto com Git habilitado  
===========
  
1. Escolha a primeira opção "*New Directory*";
1. Habilite a opção "*Create a git repository*";  

![Habilitando a criação de um **repositório *Git* ** no novo projeto \label{ProjGIT2}](./img/ProjectWithGit.png)
  
Começando so trabalhos
===========
Agora que temos um projeto de *RStudio* com o *Git* habilitado, vamos criar um script para, a partir dele explorar as funcionalidades do *Git*.
Por isso, no script criado:  
- Vamos carregar o conjunto de dados `mtcars`;  
- Criar um gráfico qualquer;  
- Salvar o script;  

Versionando (Git commit)  
===========
Agora que já temos um pedaço de código *funcional* do nosso script/projeto, vamos salvar uma primeira versão dele com *Git*:  
  
1. Vamos na opção "*commit*" presente no *menu* *Git*;  

![No menu *Git* do *RStudio*, selecionar a opção "*commit*" \label{MenuGit}](./img/RStudioGITMenu.png)  

Versionando (Git commit) II  
===========  
`r emo::ji("question")` Os arquivos marcados com **interrogação** são arquivos que não estão sendo versionados pelo *Git*.  

`r emo::ji("a")` Os arquivos marcados com a letra "**A**" (de "*added*") foram adicionadas ao versionamento, também chamado de *stagin area*.  

Inicialmente nenhum arquivo estará sendo versionado. Precisamos informar ao sistema, qual(is) arquivo(s) será(ão) versionados.

Staging area
=========

![Janela de commit \label{JanelaCommit}](./img/InicitalCommit.png)  

Vamos versionar apenas o script criado anteriormente.
Vamos marcar a caixa na coluna "*Staged*". Perceba que, ao fazê-lo, o arquivo passará a ser marcado com o ícone "**A**" mencionado anteriormente.  

Staging area II
=========

Observe, na imagem anterior:  

* As linhas em verde estão os comando adicionados (por isso estão em verde).  
* Quando estivemos criando uma versão em um script onde houve alguma exclusão de código, a linha onde houve tal exclusão estará sinalizada em vermelho.  

Git workflow
=========

**O que fizemos até agora foi sinalizar ao Git qual(is) arquivo(s) vamos versionar. Esse ato é chamado de adicionar o arquivo ao "staging area". Contudo, ainda não terminamos, falta fazer o "commit"**  
  
![Fluxo de trabalho no Git \label{GitFlow1}](./img/git_flow.png)  
  
Commit II
=========
Para criar a versão, de fato, precisamos escrever uma mensagem na área "*commit message*". Esse passo é conceitualmente chamado de "*commit*". Tendo feito isso, basta executar o "*commit*" (clicar no botão), como na \autoref{JanelaCommit}.  

* `r emo::ji("warning")`  A ideia da mensagem de commit é resumir do que foi feito (inclusão de códigos, exclusão, modificações, mas de forma resumida)  

![Janela de commit \label{JanelaCommit}](./img/InicitalCommit.png)  

Mensagem de commit
================

![Charge ironizando as mensagens de commit pouco informativas \label{msgCommit}](./img/commit_message.png)

Novos commits
=============  
Vamos seguir trabalhando neste script. Agora, vamos mudar o gráfico. Adicione qualquer outra coisa ou elemento que ache interessante.  

Salve o script e faça o *commit*.

![Janela de *commit* com as ultimas alterações realizadas \label{msgCommit2}](./img/Commits.png)  

Commit (para refletir)
=========

`r emo::ji("bulb")` Um ponto a ser considerado quando começarem a usar bastante o *Git* é: **quando fazer os commits?**  

Seguindo
=========

Agora que já temos duas versões do nosso script, vamos explorar algumas funcionalidades interessantes do *Git*.  

Git history  
=========

No menu *Git*, temos uma opção chamada *history*.  

Adivinhem?!?!  

![Janela de histórico com a versões criadas com o *Git*.  \label{historico}](./img/history.png)  

Git log  
=========
Além do histórico, temos o *log*, que é bem similar.  

![Janela de *log* \label{log1}](./img/log.png)  

Branches  
=========

Um conceito bem interessante do *Git*, **mas que não vou explorar por agora**: a possibilidade de criar *branches* de nossos projetos.  

A tradução literal de *branches* é *ramo*... como as das árvores, que derivam de um troco principal... Já conseguiu imaginar para que serve? No material *PDF* há mais informações como criar e "navegar" entre os *branches*.  

![Grafico explicativo sobre *branches* \label{octopus}](./img/branches_git.png)  

GitHub  
=========  

Bem, todo esse temmpo trabalhamos e criando versões em nossos computadores (**Git local repository**).  
  
`r emo::ji("skull")` Mas algo pode alcontecer, não?! `r emo::ji("skull")`  

Antes de usar *Git* com aplicativo de nuvem (*googleDrive*, por exemplo), há ferramentas mais apropriadas: [GitHub](github.com)  

Vamos, então criar um *login* e posteriormente um **repositorio** no [GitHub](github.com).  

> `r #emo::ji("warning")` Pode ser *GitLab*, *BitBucket*, ou qualquer outro...  

GitHub New repository  
=========  

Não é necessário criar o repositório já com em arquivo **README**.  

![Criando novo repositório no GitHub. \label{newRepo}](./img/githubNewRepo.png)  

RStudio project/Github
=========

Já que vamos trabalhar com um *repositório remoto*, precisaremos criar um novo projeto que, além do versionamento com *Git*, vai estar *linkado* a tal repositório *remoto* do *GitHub*.  
  
![Janela de criação de um novo projeto no RStudio. Para trabalhar com repositórios remotos, vamos selecionar a opção *Version Control* \label{VersionCtrl}](./img/NewProjectOption.png)  

RStudio project/Github II
=========
A seguir, selecionamos a opção Git:  

![Janela para definir qual sistema de versionamento será utilizado (*Git*, em nosso caso :) \label{JanelaGitSVN}](./img/githubRstudio2.png)  

RStudio project/Github II
=========
Em seguida temos que adicionar a **url** do repositório criado anteriormente.  

![Nessa janela devemos informar a URL do repositório remoto que vamos suar, além de dar um nome ao projeto e definir a pasta na qual vamos trabalhar. \label{JanelaURL}](./img/githubRstudio3.png)  

RStudio project/Github III
=========

Veja como muda as opções do menu *Git*:  

![\label{OpcoesGit}](./img/githubRstudio.png)  

1. *Pull Branches*: serve para atualizarmos nosso repositório **local**, caso o repositório **remoto** esteja mais atualizado;  
1. *Push Branches*: serve para, após criarmos novas versões (atualizarmos nosso reporitório **local**), enviá-las ao repositório **remoto**;  

RStudio project/Github (exercício)
=========s

Como exercício vaos criar várias alterações (*commits*) em um script de nosso projeto novo e vamos enviá-lo ao *gitHub*;  

RStudio project/Github V (para refletir)
=========

Além de pensar e discutir a melhor forma de escrever as mensagens de commit, vale refletir sobre **quando seria o momento de enviar as modificações ao repositório externo?**  

RStudio project/Github IV
=========

Após realizar o *Push* ao repositório remoto do *GitHub*, o mesmo deverá constar com os *commits* realizados.  

![Repositório no *GitHub* atualizado com os commits realizados, inclusive mostrando a ultima mensagem de *commimt*. \label{commitGitHub1}](./img/GitHubProject.png)  

RStudio project/Github V
=========

![Detalhes dos commits vistos a partir do repositório remoto no *GitHub*. \label{commitGitHub2}](./img/GitHubcommits.png)  

Github workflow
=========

![Fluxo de trabalho com *Git* e *GitHub* \label{GitFlow2}](./img/gitFlow2.jpg)  

RStudio project/Github (exercício)
=========
E como faríamos para colaborar com outras pessoas nesse mesmo script?
  
1. Criamos um repositório no GitHub, caso ainda não o tenhamos feito;  
1. Criamos em nosso computador um projeto no RStudio para versionarmos nossos scripts e enviarmos ao repositorio remoto;
1. Nosso colaborador deverá fazer um *fork* do nosso *repositório remoto* e cloná-lo ao seu *repositório local*;  
1. Uma vez feitas as modificações e a sincronização com o repositório remoto, ele poderá abrir um *pull request*, para juntar suas modificações ao meu repositório remoto.
1. Caso o *pull request* seja aceito e o repositórios juntados (*merge*), ainda será necessário sincronizá-lo com o *repositório local*. Para isso, basta fazer um *pull branches*;  
Resumo  
=========

* `r emo::ji("warning")` Versionamento/controle de versão **não é para backup de arquivos!**  
* *Cheat sheets*:
    * [GitHub Training](https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf)  
    * [GutHub Education](https://education.github.com/git-cheat-sheet-education.pdf)  
* `r emo::ji("book")` Livro: [**Git Pro**](https://git-scm.com/book/en/v2)  
* `r emo::ji("book")` Outro livro: [**Happy Git and GitHub for the useR**](http://happygitwithr.com/)  
* `r emo::ji("sos")` [Mais informações](https://support.rstudio.com/hc/en-us/articles/200532077?version=1.1.442&mode=desktop)  
* `r emo::ji("sos")` [Ajuda na configuração - BootCamp](https://help.github.com/articles/set-up-git/)  
* [Atlassian Bitbucket Tutoriais](https://www.atlassian.com/git/tutorials)  